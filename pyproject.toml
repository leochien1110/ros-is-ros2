[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ros-is-ros2"
dynamic = ["version"]
description = "ROS1-style commands as thin shims over ROS2 to improve developer ergonomics"
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.10"
authors = [
    { name = "ros-is-ros2 contributors" },
]
keywords = ["ros", "ros2", "robotics", "cli", "wrapper"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "argcomplete>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
rostopic = "ros_is_ros2.tools.rostopic:main_with_completion"
rosnode = "ros_is_ros2.tools.rosnode:main"
rosservice = "ros_is_ros2.tools.rosservice:main"
rosparam = "ros_is_ros2.tools.rosparam:main"
rosrun = "ros_is_ros2.tools.rosrun:main"
rosbag = "ros_is_ros2.tools.rosbag:main"
rosmsg = "ros_is_ros2.tools.rosmsg:main"
rossrv = "ros_is_ros2.tools.rossrv:main"
roslaunch = "ros_is_ros2.tools.roslaunch:main"
roscore = "ros_is_ros2.tools.roscore:main"

[project.urls]
Homepage = "https://github.com/leo/ros-is-ros2"
"Bug Reports" = "https://github.com/leo/ros-is-ros2/issues"
"Source" = "https://github.com/leo/ros-is-ros2"

[tool.hatch.version]
path = "src/ros_is_ros2/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/ros_is_ros2"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "Q"]
ignore = ["T201"]  # Allow print statements in CLI tools

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
